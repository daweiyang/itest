__Issue__:

__Tag__:

__Summary__:

__Precondition__

1. Tested Pkgs:
2. Tested Repo:
3. Tested Conf:

__Steps__
###Step 1: Download or update RSA packages.
###     a. if we find RSA-PKGS in home dir then we just update with git pull or we download with git clone
###     b. rsa-pkgs-list contains all the rsa packages. such as: public/base/gettext...
###     c. ssh.cfg configs the way to git pull & git clone.

> ARCH="armv7l"

> PKGSPATH="$HOME/RSA-PKGS"

> if [ -z "`grep "Host rsg" ~/.ssh/config`" ];then cat conf_fixtures/ssh.cfg >> ~/.ssh/config; fi

> if [ -d "$PKGSPATH" ];then find $PKGSPATH -type d -name ".git" | xargs -i git --git-dir {} pull origin master | tee update-log; else mkdir -p $PKGSPATH; cat conf_fixtures/rsa-pkgs-list | xargs -i git clone rsg:{} $PKGSPATH/{} | tee download-log; fi

> LOGDIR="$PWD/logs/$ARCH" && mkdir -p "$LOGDIR"

###Step 2: GBS build RSA package one by one.
###     a. now GBS doesn't support build all packages in one directory.

> PKGS="`find $PKGSPATH -type d -name '.git' -print0 | xargs -0 -i dirname {}`"

> for pkg in $PKGS; do LOGNAME=`echo $pkg | sed -e "s|$PKGSPATH||g" -e "s|/|$|g"`.log; gbs -d -c conf_fixtures/tizendev.cfg build $pkg --over -A $ARCH | tee $LOGDIR/$LOGNAME; done

###Step 3: Generate report
###     a. GBS build errors sum up to 6 as following reasons, and unexpectly.
###     b. if arch not compatible ==> Failed with arch(source code issue)
###        if failed.*missing build dependencies ==> Failed with expansion error
###        if error.*no spec files to build ==> Failed with specfile parse issue
###        if error.*No source package ==> Failed with no packaging dir or spec
###        if failed.*export source files ==> Failed with export source files
###        if failed.*due to rpmbuild issue ==> Failed with tarball issue
###        if [Ii]nfo.*[D|d]one and not arch not compatible ==> PASS
###        if not above and in all ==> Failed unexpectly

> cd $LOGDIR

> FAIL_REASON=("arch not compatible" "failed.*missing build dependencies" "error.*no spec files to build" "error.*No source package" "failed.*export source files" "failed.*due to rpmbuild issue")

> cnt=${#FAIL_REASON[@]}

> for (( i = 0; i < cnt; i++)); do grep "${FAIL_REASON[$i]}" $LOGDIR -rol --include="*.log" | sed -e "s|$LOGDIR/||g" -e "s|.log||" -e "s|\([$]\)|/|g" | tee fail_$i; done

> grep '[Ii]nfo.*[D|d]one' $LOGDIR -rol --include='*.log' | sed -e "s|$LOGDIR/||g" -e "s|.log||" -e "s|\([$]\)|/|g" | xargs -n1 | tee done; grep -vf fail_0 done | tee pass

> find $LOGDIR -name "*.log" | sed -e "s|$LOGDIR/||g" -e "s|.log||" -e "s|\([$]\)|/|g" | tee all

> cat fail* > fail; cat fail pass > kown; grep -vf kown all | tee unkown

> awk '{if (FILENAME == "fail_0") str="Failed with arch(source code issue)"; else if (FILENAME == "fail_1") str="Failed with expansion error"; else if (FILENAME == "fail_2") str="Failed with specfile parse issue"; else if (FILENAME == "fail_3") str="Failed with no packaging dir or spec"; else if (FILENAME == "fail_4") str="Failed with export source files"; else if (FILENAME == "fail_5") str="Failed with tarball issue"; else if (FILENAME == "unkown") str="Failed Unexpectly"; else str="PASS"; printf("%s, %s\n", $0, str)}' fail_* unkown pass >> sys-report.csv
